<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PaymentAllocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentAllocationRepository extends EntityRepository
{

    public function findAll()
    {
        return $this->findBy(array(), array('created' => 'DESC'));
    }

    public function deleteByMonth($id, $month)
    {
        $results = $this->getEntityManager()
            ->createQuery(
                'SELECT pa.id '
                . 'FROM AppBundle:Erf e '
                . 'INNER JOIN AppBundle:PaymentAllocation pa With e.id = pa.erfId '
                . 'WHERE pa.month = :month '
                . 'AND e.sectionId = :id')
            ->setParameter('id', $id)
            ->setParameter('month', $month)
            ->getResult();
                
        $array = [];
        foreach($results as $value) {
            $array[] = $value['id'];
        }
        
        $query = $this->getEntityManager()
                ->createQuery('DELETE FROM AppBundle:PaymentAllocation pa WHERE pa.id IN (:ids)');
        $query->setParameter('ids', $array);
        $query->execute(); 
    }

    public function allocateBySection($id)
    {
        $em = $this->getEntityManager();

        $entities = $em->getRepository('AppBundle:Erf')->findBy(array('sectionId' => $id));

        $rate = $em->getRepository('AppBundle:Rate')->findOneBy(array('id' => 1));

        foreach ($entities as $result) {

            $allocation = new PaymentAllocation();
            $allocation->setErf($result);
            $allocation->setAmount($rate->getAmount());
            $date = new \DateTime();
            $allocation->setMonth($date->format('F'));
            $allocation->setCreated($date);
            $allocation->setUpdated($date);
            //set month number when updated
            if($result->getMonth() != $date->format('m')) {
                $currentBalance = $rate->getAmount() + $result->getBalance();
                $result->setPreviousBalance($result->getBalance());
                $result->setBalance($currentBalance);
                $result->setMonth($date->format('m'));
                $em->persist($result);
            }
            $em->persist($allocation);
        }

        $em->flush();
        $em->clear();
    }
}