<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends EntityRepository
{

    public function findAll()
    {
        return $this->getEntityManager()
                        ->createQuery('SELECT p FROM AppBundle:Payment p ORDER BY p.updated DESC')
                        ->setMaxResults(100)
                        ->getResult();
    }

    public function getCurrentBalance($erfId)
    {
        $results = $this->getEntityManager()
                ->createQuery(
                        'SELECT p FROM AppBundle:Payment p '
                        . 'WHERE p.erfId = :erf_id '
                        . 'ORDER BY p.created DESC')
                ->setParameter('erf_id', $erfId)
                ->setMaxResults(1)
                ->getOneOrNullResult();

        return $results;
    }

    public function updateCurrentBalance($id, $balance)
    {
        $qb = $this->getEntityManager()->createQueryBuilder('AppBundle:Erf');

        $qb->update('AppBundle:Erf e')
                ->set('e.balance', ':balance')
                ->where('e.id = :id')
                ->setParameter('id', $id)
                ->setParameter('balance', $balance)
                ->getQuery()
                ->execute();
    }

    public function getRecent()
    {
        $results = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppBundle:Payment p ORDER BY p.created DESC')
                ->setMaxResults(10)
                ->getResult();

        return $results;
    }

    public function getBarGraphValues()
    {
        $results = $this->getEntityManager()
                ->createQuery(
                        'SELECT MONTHNAME(p.created), count(p) '
                        . 'FROM AppBundle:Payment p '
                        . 'GROUP BY p.created '
                        . 'ORDER BY p.created ASC')
                ->getResult(Query::HYDRATE_ARRAY);

        $array = array();

        foreach ($results as $result) {
            $array[] = [$result[1], (int) $result[2]];
        }

        return $array;
    }

    public function getPieGraphValues($start = null, $end = null)
    {
        if (is_null($start)) {
            $start = date('m');
            $end = date('m');
        }

        $results = $this->getEntityManager()
                ->createQuery(
                        'SELECT count(p) AS cont, s.name, s.id '
                        . 'FROM AppBundle:Payment p '
                        . 'LEFT JOIN AppBundle:Erf e With e.id = p.erfId '
                        . 'LEFT JOIN AppBundle:Section s With s.id = e.sectionId '
                        . 'WHERE MONTH(p.created) BETWEEN :start AND :end '
                        . 'GROUP BY s.id')
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->getResult(Query::HYDRATE_ARRAY);

        $array = array();

        foreach ($results as $result) {
            $array[] = array('label' => $result['name'], 'data' => $result['cont'], 'id' => $result['id']);
        }

        return $array;
    }

    public function getSectionReport($id, $start = null, $end = null)
    {

        if (is_null($start)) {
            $start = date('m');
            $end = date('m');
        }

        $results = $this->getEntityManager()
                ->createQuery(
                        'SELECT p.amountReceived, p.created, MONTHNAME(p.created) as month, e.erfNo, '
                        . 'e.address as address, s.name as section '
                        . 'FROM AppBundle:Payment p '
                        . 'LEFT JOIN AppBundle:Erf e With e.id = p.erfId '
                        . 'LEFT JOIN AppBundle:Section s With s.id = e.sectionId '
                        . 'WHERE s.id = :id '
                        . 'AND MONTH(p.created) BETWEEN :start AND :end ')
                ->setParameter('id', $id)
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->getResult(Query::HYDRATE_ARRAY);

        return $results;
    }

    public function getAllPayments($start = null, $end = null)
    {
         if (is_null($start)) {
            $start = date('m');
            $end = date('m');
        }

        $results = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('COUNT(p)')
                ->from('AppBundle:Payment', 'p')
                ->where('MONTH(p.created) BETWEEN :start AND :end')
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->getQuery()
                ->getSingleScalarResult();
    
        return $results;
    }
    
    public function getCompleted($start = null, $end = null)
    {
         if (is_null($start)) {
            $start = date('m');
            $end = date('m');
        }

        $results = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('COUNT(p)')
                ->from('AppBundle:Payment', 'p')
                ->where('MONTH(p.created) BETWEEN :start AND :end')
                ->andWhere('p.paymentStatusId = :status')
                ->setParameter('status', 1)
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->getQuery()
                ->getSingleScalarResult();
    
        return $results;
    }
    
    public function getCancelled($start = null, $end = null)
    {
         if (is_null($start)) {
            $start = date('m');
            $end = date('m');
        }

        $results = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('COUNT(p)')
                ->from('AppBundle:Payment', 'p')
                ->where('MONTH(p.created) BETWEEN :start AND :end')
                ->andWhere('p.paymentStatusId = :status')
                ->setParameter('status', 2)
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->getQuery()
                ->getSingleScalarResult();
    
        return $results;
    }
    
    public function getRevenue($start = null, $end = null)
    {
         if (is_null($start)) {
            $start = date('m');
            $end = date('m');
        }

        $results = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('Sum(p.amountReceived)')
                ->from('AppBundle:Payment', 'p')
                ->where('MONTH(p.created) BETWEEN :start AND :end')
                ->andWhere('p.paymentStatusId = :status')
                ->setParameter('status', 1)
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->getQuery()
                ->getSingleScalarResult();
    
        return $results;
    }
    
    
    
    
    
    
    
    public function getErfReport($id, $start = null, $end = null)
    {

        if (is_null($start)) {
            $start = date('m');
            $end = date('m');
        }

        $results = $this->getEntityManager()
                ->createQuery(
                        'SELECT p.amountReceived, p.created, MONTHNAME(p.created) as month, e.erfNo, '
                        . 'e.address as address, s.name as section '
                        . 'FROM AppBundle:Payment p '
                        . 'LEFT JOIN AppBundle:Erf e With e.id = p.erfId '
                        . 'LEFT JOIN AppBundle:Section s With s.id = e.sectionId '
                        . 'WHERE s.id = :id '
                        . 'AND MONTH(p.created) BETWEEN :start AND :end ')
                ->setParameter('id', $id)
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->getResult(Query::HYDRATE_ARRAY);

        return $results;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

}
